{"ast":null,"code":"var _jsxFileName = \"/Users/bbigemoloserr/Documents/counter-app/src/components/counter.jsx\";\nimport React, { Component } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Counter extends Component {\n  /// chỉ cần dc initialize là 1 prop thì muốn call nó thì phải thêm từ props vào trc ex: this.props.A \n  ///đổi từ count: 0 sang như trên vì h count dc update \n  ///Counters pass 2 attributes là key={counter.id} value={counter.value} cho nên bây giờ trong state của counter đã có 2 props là key=\"\" và value=\"\" nên dể access dc cái props đó thì dùng cú pháp this.props.(tên của cái props) giống như example như trên là this.props.value, key và value là 2 attribute \n  ///value={counter.value} chữ value đầu tiên là tên của attribute đó nên đặt tên attribute là gì thì ko dc đổi khi dùng cú pháp access props là this.props.(tên của cái attribute) this.props.value\n  render() {\n    console.log(\"props\", this.props); ///props ở đây là một object chứa tất cả các attributes mà attribute ở đây là props (data từ state của components input vào đây khác vd: Counters) dc pass vào đây \n\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: this.changeBadgeClasses(),\n          children: this.formatCount()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: this.displayWarning\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.props.onIncrement,\n        className: \"btn btn-secondary btn-sm\",\n        children: \"Increment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.props.onDelete(this.props.counter.id),\n        className: \"btn btn-secondary btn-sm\",\n        children: \"Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 9\n    }, this);\n  } ///hai cái button này ko giống nhau và ko thể reuse code của handleIncrement cho handleDelete dù chỉ là tăng 1 giảm 1 giống nhau \n  /// Cái trên dc pass vào như là 1 function dc gán qua 1 instance là handleIncrement hay ta gọi nó là 1 Method, chỉ hoạt động trong counter component only vì nó dc tạo ra ở trong component đó lun nên nó có thể edit dc state của component đó \n  ///Còn cái handleDelete có mục đích dc tạo ra để delete cái data dc pass vào Counter component hay nói các khác là để delete props của counter component. Nó dc render trong counter nên ko thể access hay edit dc state của component khác (Counters) ngoài component mà nó đang ở trong (Counter) nên ở đây ta dùng pphap raising handler - calling handler\n  /// Trong truong hop này, giai thich ra là we create a method in the counter components (handleDelete) and pass it via a props (onDelete) TO the Counter Component\n  ///handleDelete dc pass vào giống như 1 props (this.props.handleDelete)giong như ví dụ value ở trên vậy (this.props.value)\n\n\n  displayWarning() {\n    if (this.state.count === 0) return 'Please enter a value';\n    return 'Complete';\n  }\n\n  changeBadgeClasses() {\n    let classes = \"badge m-2 badge-\";\n    classes += this.state.value === 0 ? \"warning\" : \"primary\";\n  }\n\n  formatCount() {\n    const {\n      value\n    } = this.state;\n    return value === 0 ? 'Zero' : value;\n  }\n\n}","map":{"version":3,"sources":["/Users/bbigemoloserr/Documents/counter-app/src/components/counter.jsx"],"names":["React","Component","Counter","render","console","log","props","changeBadgeClasses","formatCount","displayWarning","onIncrement","onDelete","counter","id","state","count","classes","value"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;AACA,eAAe,MAAMC,OAAN,SAAsBD,SAAtB,CAAgC;AAEvC;AACA;AACA;AACA;AAIJE,EAAAA,MAAM,GAAG;AACLC,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqB,KAAKC,KAA1B,EADK,CAEL;;AACA,wBACA,QAAC,KAAD,CAAO,QAAP;AAAA,8BACQ;AAAA,+BACJ;AAAM,UAAA,SAAS,EAAE,KAAKC,kBAAL,EAAjB;AAAA,oBACK,KAAKC,WAAL;AADL;AAAA;AAAA;AAAA;AAAA;AADI;AAAA;AAAA;AAAA;AAAA,cADR,eAMQ;AAAA,kBACK,KAAKC;AADV;AAAA;AAAA;AAAA;AAAA,cANR,eASI;AAAQ,QAAA,OAAO,EAAI,KAAKH,KAAL,CAAWI,WAA9B;AAA2C,QAAA,SAAS,EAAC,0BAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cATJ,eAcI;AAAQ,QAAA,OAAO,EAAI,MAAI,KAAKJ,KAAL,CAAWK,QAAX,CAAoB,KAAKL,KAAL,CAAWM,OAAX,CAAmBC,EAAvC,CAAvB;AAAmE,QAAA,SAAS,EAAC,0BAA7E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAdJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADA;AAkBH,GA9B0C,CA+B3C;AACA;AACA;AACA;AACA;;;AACAJ,EAAAA,cAAc,GAAG;AACb,QAAI,KAAKK,KAAL,CAAWC,KAAX,KAAqB,CAAzB,EAA4B,OAAO,sBAAP;AAC5B,WAAO,UAAP;AACH;;AACDR,EAAAA,kBAAkB,GAAG;AACjB,QAAIS,OAAO,GAAG,kBAAd;AACAA,IAAAA,OAAO,IAAK,KAAKF,KAAL,CAAWG,KAAX,KAAqB,CAAtB,GAA2B,SAA3B,GAAuC,SAAlD;AACH;;AACDT,EAAAA,WAAW,GAAG;AACV,UAAM;AAACS,MAAAA;AAAD,QAAU,KAAKH,KAArB;AACA,WAAOG,KAAK,KAAK,CAAV,GAAc,MAAd,GAAuBA,KAA9B;AACH;;AA/C0C","sourcesContent":["import React, { Component } from 'react'\nexport default class Counter extends Component {\n   \n        /// chỉ cần dc initialize là 1 prop thì muốn call nó thì phải thêm từ props vào trc ex: this.props.A \n        ///đổi từ count: 0 sang như trên vì h count dc update \n        ///Counters pass 2 attributes là key={counter.id} value={counter.value} cho nên bây giờ trong state của counter đã có 2 props là key=\"\" và value=\"\" nên dể access dc cái props đó thì dùng cú pháp this.props.(tên của cái props) giống như example như trên là this.props.value, key và value là 2 attribute \n        ///value={counter.value} chữ value đầu tiên là tên của attribute đó nên đặt tên attribute là gì thì ko dc đổi khi dùng cú pháp access props là this.props.(tên của cái attribute) this.props.value\n        \n     \n   \n    render() { \n        console.log(\"props\", this.props)\n        ///props ở đây là một object chứa tất cả các attributes mà attribute ở đây là props (data từ state của components input vào đây khác vd: Counters) dc pass vào đây \n        return (\n        <React.Fragment>\n                <div>\n            <span className={this.changeBadgeClasses()}>\n                {this.formatCount()}\n                </span>\n                </div>\n                <div>\n                    {this.displayWarning}\n                </div>\n            <button onClick = {this.props.onIncrement} className=\"btn btn-secondary btn-sm\">Increment</button>\n            {/* we remove the local state and make all the data of the Counter component will rely on props passed from Counters local state, the Counters components(parent component) will directly control the Counter component, we call this as a controlled component bc it data will receive from props passed to it and raise event to its parent component whenever it need to modify its data  */}\n            {/* bc we rm the local state so everything starts with this.state or this. need to be change  */}\n            {/* <button onClick = {this.handleIncrement} className=\"btn btn-secondary btn-sm\">Increment</button>\n            The method handleIncrement is no longer exist in this component bc we delete the state so we put it at counter's parent component(counters.jsx) and pass it to this component as a prop */}\n            <button onClick = {()=>this.props.onDelete(this.props.counter.id)} className=\"btn btn-secondary btn-sm\">Delete</button>\n        </React.Fragment>\n        ); \n    }\n    ///hai cái button này ko giống nhau và ko thể reuse code của handleIncrement cho handleDelete dù chỉ là tăng 1 giảm 1 giống nhau \n    /// Cái trên dc pass vào như là 1 function dc gán qua 1 instance là handleIncrement hay ta gọi nó là 1 Method, chỉ hoạt động trong counter component only vì nó dc tạo ra ở trong component đó lun nên nó có thể edit dc state của component đó \n    ///Còn cái handleDelete có mục đích dc tạo ra để delete cái data dc pass vào Counter component hay nói các khác là để delete props của counter component. Nó dc render trong counter nên ko thể access hay edit dc state của component khác (Counters) ngoài component mà nó đang ở trong (Counter) nên ở đây ta dùng pphap raising handler - calling handler\n    /// Trong truong hop này, giai thich ra là we create a method in the counter components (handleDelete) and pass it via a props (onDelete) TO the Counter Component\n    ///handleDelete dc pass vào giống như 1 props (this.props.handleDelete)giong như ví dụ value ở trên vậy (this.props.value)\n    displayWarning() {\n        if (this.state.count === 0) return 'Please enter a value'\n        return 'Complete'\n    }\n    changeBadgeClasses() {\n        let classes = \"badge m-2 badge-\";\n        classes += (this.state.value === 0) ? \"warning\" : \"primary\";\n    }\n    formatCount() {\n        const {value} = this.state\n        return value === 0 ? 'Zero' : value\n    }\n}\n \n\n\n"]},"metadata":{},"sourceType":"module"}